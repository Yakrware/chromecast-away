// Generated by CoffeeScript 1.7.0
(function() {
  var CastConnection, CastMedia,
    __slice = [].slice;

  CastConnection = (function() {
    function CastConnection(applicationID) {
      this.applicationID = applicationID;
      if (!chrome.cast) {
        throw "chrome.cast namespace not found";
      }
      this.cast = chrome.cast;
    }

    CastConnection.prototype.connect = function(callback) {
      this.callback = callback;
      return window['__onGCastApiAvailable'] = (function(_this) {
        return function(loaded, errorInfo) {
          var apiConfig, app, error, sessionRequest, success;
          if (loaded) {
            app = _this.applicationID || _this.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID;
            sessionRequest = new _this.cast.SessionRequest(app);
            apiConfig = new _this.cast.ApiConfig(sessionRequest, function() {
              var data;
              data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _this.sessionListener.apply(_this, data);
            }, function() {
              var data;
              data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _this.receiverListener.apply(_this, data);
            });
            success = function() {};
            error = function() {
              throw 'Failed to initialize connection';
            };
            return _this.cast.initialize(apiConfig, success, error);
          }
        };
      })(this);
    };

    CastConnection.prototype.sessionListener = function(session) {
      console.log(session);
      session.addUpdateListener(this.sessionUpdateListener);
      return session.addMessageListener(this.namespace, this.receiverMessage);
    };

    CastConnection.prototype.receiverListener = function(receiver) {
      var state;
      if (receiver === this.cast.ReceiverAvailability.AVAILABLE) {
        state = 'available';
      }
      return this.callback({
        receivers: state || 'unavailable'
      });
    };

    CastConnection.prototype.sessionUpdateListener = function(isAlive) {
      return console.log(isAlive);
    };

    CastConnection.prototype.receiverMessage = function(namespace, message) {};

    CastConnection.prototype.requestSession = function(callback) {
      return this.cast.requestSession(function(session) {
        return callback(new CastMedia(session));
      }, function(error) {
        console.log(error);
        throw "Failed to create a session " + error;
      });
    };

    return CastConnection;

  })();

  CastMedia = (function() {
    function CastMedia(session) {
      this.session = session;
      if (!chrome.cast) {
        throw "chrome.cast namespace not found";
      }
      this.cast = chrome.cast;
    }

    CastMedia.prototype.load = function(media, callback) {
      var mediaInfo, request;
      if (!media.url) {
        throw "No media url set";
      }
      if (!media.contentType) {
        throw "No media content type set";
      }
      mediaInfo = new this.cast.media.MediaInfo(media.url, media.contentType);
      request = new this.cast.media.LoadRequest(mediaInfo);
      return this.session.loadMedia(request, (function(_this) {
        return function(media) {
          _this.media = media;
          return callback();
        };
      })(this), function(error) {
        throw "Failed to load media";
      });
    };

    CastMedia.prototype.play = function(success, error) {
      if (!this.media) {
        return;
      }
      return this.media.play(null, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof success === "function" ? success.apply(null, args) : void 0;
      }, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof error === "function" ? error.apply(null, args) : void 0;
      });
    };

    CastMedia.prototype.pause = function(success, error) {
      if (!this.media) {
        return;
      }
      return this.media.pause(null, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof success === "function" ? success.apply(null, args) : void 0;
      }, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof error === "function" ? error.apply(null, args) : void 0;
      });
    };

    CastMedia.prototype.stop = function(success, error) {
      if (!this.media) {
        return;
      }
      return this.media.stop(null, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof success === "function" ? success.apply(null, args) : void 0;
      }, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof error === "function" ? error.apply(null, args) : void 0;
      });
    };

    CastMedia.prototype.seek = function(success, error) {
      if (!this.media) {
        return;
      }
      return this.media.seek(null, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof success === "function" ? success.apply(null, args) : void 0;
      }, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof error === "function" ? error.apply(null, args) : void 0;
      });
    };

    CastMedia.prototype.quit = function(success, error) {
      if (!this.session) {
        return;
      }
      return this.session.stop(function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof success === "function" ? success.apply(null, args) : void 0;
      }, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof error === "function" ? error.apply(null, args) : void 0;
      });
    };

    return CastMedia;

  })();

  window.CastConnection = CastConnection;

}).call(this);
