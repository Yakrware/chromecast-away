// Generated by CoffeeScript 1.7.1
(function() {
  var Session,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Session = (function(_super) {
    __extends(Session, _super);

    function Session(session) {
      this.session = session;
      if (!chrome.cast) {
        throw "chrome.cast namespace not found";
      }
      this.cast = chrome.cast;
    }

    Session.prototype.load = function(mediaInfo, success, error) {
      var request;
      request = new this.cast.media.LoadRequest(mediaInfo);
      return this.session.loadMedia(request, (function(_this) {
        return function(media) {
          media.addUpdateListener(function() {
            return _this.sessionUpdateListener();
          });
          return success(media);
        };
      })(this), function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return error.apply(null, args);
      });
    };

    Session.prototype.sessionUpdateListener = function() {
      var event, media;
      media = this.session.media[0];
      event = (function() {
        switch (media.playerState) {
          case 'PLAYING':
            return 'play';
          case 'PAUSED':
            return 'pause';
          case 'STOPPED':
            return 'stop';
          case 'SEEKING':
            return 'seek';
          case 'ERROR':
            return 'error';
          case 'IDLE':
            return 'idle';
          case 'LOADING':
            return 'load';
        }
      })();
      return this.emit(event);
    };

    Session.prototype.music = function(config, callbacks) {
      var image, key, mediaInfo, metadata, value;
      if (config == null) {
        config = {};
      }
      if (!config.url) {
        throw "Url required for music";
      }
      if (!config.contentType) {
        throw "Content-type required for music";
      }
      mediaInfo = new this.cast.media.MediaInfo(config.url, config.contentType);
      metadata = new chrome.cast.media.MusicTrackMediaMetadata();
      metadata.metadataType = chrome.cast.media.MetadataType.MUSIC_TRACK;
      for (key in config) {
        value = config[key];
        if (key === 'images') {
          value = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              image = value[_i];
              _results.push(new this.cast.Image(image));
            }
            return _results;
          }).call(this);
        }
        metadata[key] = value;
      }
      mediaInfo.metadata = metadata;
      return this.load(mediaInfo, (function(_this) {
        return function(media) {
          return typeof callbacks.success === "function" ? callbacks.success(new MediaControls(media)) : void 0;
        };
      })(this), function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof callbacks.error === "function" ? callbacks.error.apply(callbacks, args) : void 0;
      });
    };

    Session.prototype.release = function(success, error) {
      if (!this.session) {
        return;
      }
      return this.session.stop((function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof success === "function" ? success.apply(null, args) : void 0;
      }), (function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return typeof error === "function" ? error.apply(null, args) : void 0;
      }));
    };

    return Session;

  })(EventEmitter);

  module.exports = Session;

}).call(this);
